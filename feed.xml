<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Your awesome title</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</description>
    <link>http://yourdomain.com/</link>
    <atom:link href="http://yourdomain.com/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>设计模式：代理</title>
        <description>&lt;p&gt;大腕还是要开门的，厕所门。&lt;/p&gt;

&lt;p&gt;今天的主题是proxy，代理？意思你许多事情，你只要想，只要说，做就让罗罗们去做吧。&lt;/p&gt;

&lt;p&gt;作为一个大腕，事情比较多，各种应酬。。。没办法啊，财务管不了了，请个经纪人。吃喝拉撒的，就靠保姆了。&lt;/p&gt;

&lt;p&gt;经纪人，保姆是大腕的代理么？有点接近这个意思，意思帮他处理他想做的事情。&lt;/p&gt;

&lt;p&gt;而程序员中的proxy有点区别，代理负责接头，实事还是要靠大腕。这怎么说的过去呢！大腕还要开个车门上车？&lt;/p&gt;

&lt;p&gt;举个贴切的例子，譬如，某大大导演要求大腕拍电影，接头的事情可能让经纪人去做，但真正的签约还是要大腕亲自上场。&lt;/p&gt;

&lt;p&gt;所以，假如大腕有个签约的行为，那么代理也有个签约的行为，而代理的签约行为其实就是大腕的行为。&lt;/p&gt;

&lt;p&gt;你懂的，大腕事情多，不在特定阶段，他不会上场。&lt;/p&gt;

&lt;p&gt;好了，回到程序中，如何理解我们程序中的proxy呢？&lt;/p&gt;

&lt;p&gt;假如，我们从数据库中读取所有的客户信息，而客户信息非常庞大，譬如说100个字段。
而我们所需要的是，把这些客户首先按名字列出来，当我们切换视图的时候，才需要载入其他信息，譬如客户的照片。&lt;/p&gt;

&lt;p&gt;如果我们一次性读入客户的源数据，那么就会非常庞大，当然你会说使用SQL读取我们少量的字段，对。不过，你懂的，现在的数据库的开发，基本使用ORM，所以都是一个个对象。&lt;/p&gt;

&lt;p&gt;我们这里的做法就是，首先读取用户的ID，来加载代理，然后当需要其他数据的时候，代理再负责创建复杂的客户对象。这样我们降低内存消耗，而且我们可以lazy load的模式加载客户对象。&lt;/p&gt;

&lt;p&gt;下面我们来举个目录文件访问的一个实例。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;interface Image {
    public function showImage();
}
class HighResolutionImage implements Iamge {
    private $imagepath;
    public function __construct($imagepath)
    {
        $this-&amp;gt;imagepath = $imagepath;
    }
    public function showImage()
    {
        //do real work here...
    }
}
class ProxyImage extends HighResolutionImage
{
    private $sourceImage;
    private $imagepath;
    public function __construct($imagepath)
    {
        $this-&amp;gt;imagepath = $imagepath;
    }
    public function showImage()
    {
        if($this-&amp;gt;sourceImage == null)
        {
            //...或者从数据库里读取 HQL DQL..
            $this-&amp;gt;sourceImage = new HighResolutionImage($this-&amp;gt;imagepath);
        }
        $this-&amp;gt;sourceImage-&amp;gt;showImage();
    }
}
class ImageView {
    public function someactoin()
    {
        $proxyImage1 = new ProxyImage(&#39;path/to/image1.jpg&#39;);
        $proxyImage2 = new ProxyImage(&#39;path/to/image2.jpg&#39;);
        //当我们调用showImage的时候，真正的HighResolutionImage才会载入
        $proxyImage1-&amp;gt;showImage();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上是PHP的实现，我们的代理也可以不直接继承实际对象类，而是实现接口。如果一个复杂的类实现多个接口，我们的代理可以代理其中一个接口的行为。&lt;/p&gt;
</description>
        <pubDate>Mon, 19 May 2014 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/php/2014/05/19/design-pattern-proxy/</link>
        <guid isPermaLink="true">http://yourdomain.com/php/2014/05/19/design-pattern-proxy/</guid>
      </item>
    
      <item>
        <title>设计模式：原型</title>
        <description>&lt;p&gt;人能复制么？好像现在克隆技术了。但是这种克隆还不是真正意义的克隆。CLONE.&lt;/p&gt;

&lt;p&gt;复制和克隆，COPY AND CLONE，COPY用词在计算机领域比较风靡 ，至于克隆估计是生物学家，觉得用克隆比较酷，如果COPY无法体现在他们那个领域的特殊性。但是，现在，克隆在计算机领域也依然风靡。&lt;/p&gt;

&lt;p&gt;我们了解的是DNA的一种复制，然后放到卵细胞中，在让细胞不断的复制。&lt;/p&gt;

&lt;p&gt;理论上的复制是必须是完全的相同的，所以正常的克隆理解，应该属于DNA的复制。把一只羊的DNA取来克隆一只小绵羊出来，就从年龄来说也不是一样的，不要说以后的发育都会环境而变化。&lt;/p&gt;

&lt;p&gt;克隆技术在我们生活中有什么作用呢（可以说COPY技术吧）？&lt;/p&gt;

&lt;p&gt;你懂的，考试的时候抄袭，就是一种克隆，为了让你的答案和另外一个优秀的学生一样。&lt;/p&gt;

&lt;p&gt;盗版，也是克隆，意思我还需要努力什么呢？有现成的就拿过来使就行了。&lt;/p&gt;

&lt;p&gt;复印机，你懂的，你开个公司，每次出去签合同，不会每次都要重新起草你的合同书吧。做个合同范本，然后复印几分备用。&lt;/p&gt;

&lt;p&gt;如果把我克隆了，那我希望是，我又年轻又有智慧又。。。反正就是我最好的状态，然后把我几个克隆的派去找对象，找的那个就我就保留，其他的全部摧毁，呵呵，那我还存在不？晕。&lt;/p&gt;

&lt;p&gt;计算机领域，就像个黑洞，不断在吸收各种领域的手段，方法，技术，经验。。。&lt;/p&gt;

&lt;p&gt;所以，在计算机里出现克隆，没什么大不了的。&lt;/p&gt;

&lt;p&gt;从上面看出克隆的好处了么？&lt;/p&gt;

&lt;p&gt;譬如我们要对一组数据进行分析，这种分析可能会改变原有数据，数据是从数据库获取的。&lt;/p&gt;

&lt;p&gt;这种情况下，如果我们有3中分析的方式，我分析3次就要从数据库读取3次，我们降低次数到1次，只要把第一次的数据做成PROTOTYPE–原型，后面的分析只需要3个克隆的数据了。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Prototype {
    //填写合同
    public function signWith($company)
    {
    }
    public function __clone()
    {

    }
}
//针对小型企业合同范本
class ContractA extends Prototype {
    public function signWith($company)
    {
        ....
    }
    public function __clone()
    {
    }
}
//针对大型企业合同范本
class ContractB extends Prototype {
    public function signWith($company)
    {
      ....
    }
    public function __clone()
    {
    }
}
$prototype = new ContractA();
$ca1 = clone $prototype;
$ca1-&amp;gt;signWith($small_company1);
$ca2 = clone $protptype;
$ca2-&amp;gt;signWith($small_company2);
$prototype2 = new ContractB();
$cb1 = clone $prototype2;
$cb1-&amp;gt;signWith($big_company1);
$cb2 = clone $protptype;
$cb2-&amp;gt;signWith($big_company2);
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Mon, 19 May 2014 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/php/2014/05/19/design-pattern-prototype/</link>
        <guid isPermaLink="true">http://yourdomain.com/php/2014/05/19/design-pattern-prototype/</guid>
      </item>
    
      <item>
        <title>使用Jekyll拥有自己的静态网站</title>
        <description>&lt;p&gt;作为一个程序员，做一个自己的博客，应该不是一件很难的事情。但我始终犹豫不绝，我想我太过完美化了。
这是一种强迫症？我总希望自己把东西做到最完美之后，才呈现出来。可是，完美永无止尽。这次，我不再迟疑了。
我需要一个自己的博客，这么多年了，总有点东西想写写，不管是自己回忆记忆也好，还是能分享给大家也好，总归是一件好事。
注册一个域名，备案，在中国是一个很耗时的事情。算了，在GITHUB建个免费站点还是不错的。&lt;/p&gt;

&lt;h2 id=&quot;github&quot;&gt;在Github上自动生成一个网站&lt;/h2&gt;

&lt;p&gt;我想你应该看过此类域名的网站 xxx.github.io ，你也想要一个么？免费的。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;首先，你要创建一个github账号。如何创建？我想这个你能完成。&lt;/li&gt;
  &lt;li&gt;接下来你要做的是创建一个Repository，名字是 yourname.github.io。 GIT会吧？不会最好先学一下基本用法。&lt;/li&gt;
  &lt;li&gt;点击此Repository的设置(settting），进入之后找到 &lt;strong&gt;Automatic Page Generator&lt;/strong&gt;。&lt;/li&gt;
  &lt;li&gt;点击按钮，它会让你编辑一下首页，并且让你选择一个模版，完成之后就自动生成网站了。网站的所有文件都保存在yourname.github.io这个Repostiroy中，
你可以用GIT进行更新操作。&lt;/li&gt;
  &lt;li&gt;少等几分钟，你就可以访问 yourname.github.io 网址了。虽然自动生成的，内容也好，模版也好可能不会令你非常满意，不管怎样，这是你的网站了。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这么做是简单，但是我之后怎么管理我的网站呢？这里我介绍一个工具，可以强大你的网站管理能力。它就是jeykll，这也是github官方推荐的。&lt;/p&gt;

&lt;h2 id=&quot;jekyll&quot;&gt;在你机器上安装jekyll&lt;/h2&gt;

&lt;p&gt;首先对于linux和mac平台上的用户而言，安装jekyll非常容易。所以我们这里只介绍windows平台上的安装，这个过程会让你懂得在其他平台上的安装。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;由于ruby语言在windows上，默认是没有的，所以我们需要去&lt;a href=&quot;http://rubyinstaller.org/downloads/&quot;&gt;ruby站点&lt;/a&gt;下载安装包。&lt;/li&gt;
  &lt;li&gt;安装ruby的时候，确定自动设置环境变量。&lt;/li&gt;
  &lt;li&gt;鉴别一下你的windows是64位的还是32位，下载相应的安装包。除此之外你还要下载对应的&lt;strong&gt;DEVELOPMENT KIT&lt;/strong&gt;包。解压到一个目录中，取名虽然可以随意，
如果你不想有意外，那么就取名为 devkit。&lt;/li&gt;
  &lt;li&gt;打开windows的控制台，进入命令行&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;$ cd c:/devkit
$ ruby dk.rb init
$ ruby dk.rb install
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;第二行命令会自动创建一个confg.yml文件，内容如下&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;# This configuration file contains the absolute path locations of all
# installed Rubies to be enhanced to work with the DevKit. This config
# file is generated by the &#39;ruby dk.rb init&#39; step and may be modified
# before running the &#39;ruby dk.rb install&#39; step. To include any installed
# Rubies that were not automagically discovered, simply add a line below
# the triple hyphens with the absolute path to the Ruby root directory.
#
# Example:
#
# ---
# - C:/ruby19trunk
# - C:/ruby192dev
#
---
- C:/Ruby200-x64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;要注意你安装的ruby目录是不是所指的一样。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果没有意外，等命令执行完，你就可以立即执行下面命令了&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;$ gem install jekyll
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个安装估计需要点时间，所以你要耐心等待。linux和mac用户到这里应该知道如何安装了吧。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;接下来的事情就交给 &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;jeky官网&lt;/a&gt;了，不过事情还没有完，你先把官网的教学内容看看之后再跟我继续。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;markdown&quot;&gt;如何正常解析Markdown代码块&lt;/h2&gt;

&lt;p&gt;我使用的Markdown格式编辑页面和帖子，代码块的语法是&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;```
  这里代码
```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; ~~~
  这里代码
 ~~~
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意一点的是，jekyll默认使用的是kramdown(在_config.yml中配置)，所以你的markdown中避免使用第一种代码块语法，采用第二种。&lt;/p&gt;

&lt;p&gt;接下来又遇到问题了，如果代码块中要放入的代码就是Liquid，该怎么办呢？还有PHP的Twig语法与Liquid语法几乎一样。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% raw %}
  Liquid 代码 或者 Twig 代码 这里
{% endraw %}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;post&quot;&gt;Post实现翻页功能&lt;/h2&gt;

&lt;p&gt;这里要注意的是，index格式必须是HTML，如果要放到一个子目录夹中，譬如 blog/index.html，要注意的是yaml头的permalink不要写，不然无法生成page页面。&lt;/p&gt;

</description>
        <pubDate>Sun, 18 May 2014 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/2014/05/18/create-static-site-using-jekyll/</link>
        <guid isPermaLink="true">http://yourdomain.com/2014/05/18/create-static-site-using-jekyll/</guid>
      </item>
    
  </channel>
</rss>
